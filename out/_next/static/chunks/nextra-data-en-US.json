{"/Getting-Started/Installation":{"title":"Installation","data":{"":"Installing CrescTest is quick and simple, and there are multiple ways to install it, depending\non the requirements of your project.","roblox#Roblox":"These are common and supported methods for installing CrescTest for Roblox Studio.","wally#Wally":"You can download CrescTest using Wally like so:\n[dev-dependencies]\nCrescTest = \"sinlerdev/cresctest@x.x.x\"\n\nSince its hard to always update the version tag in the code snippet, it only exists as a template for downloading CrescTest.","rojo#Rojo":"You can download CrescTest without Wally by doing:\nCopy the lib directory into your codebase\nRename the folder to CrescTest\nUse Rojo to sync the files into a place","releases#Releases":"Crescent provides a roblox model file everytime a release is made, so that you can directly place it into Roblox Studio's explorer.","lune#Lune":"These are common and supported methods for installing CrescTest for Lune.","from-source#From Source":"You can download CrescTest by:\nCopy the lib directory into your codebase\nRename the folder to CrescTest"}},"/Getting-Started/Writing-Tests":{"title":"Writing Tests","data":{"":"Unlike running tests, writing a spec file is usually straightforward and universal between runtimes.When writing a spec file, you need to first return a table that returns functions.\nThose functions will be treated as a test case.A Math library, and its spec file could look like this:\n-- Math.luau\nlocal Math = {}\n\nfunction Math.add(a, b)\nreturn a + b\nend\n\nfunction Math.subtract(a, b)\nreturn a - b\nend\n\nreturn Math\n\n-- Math.spec.luau\nlocal expect = CrescTest.expect\nreturn {\nshould_add = function(skip)\nexpect(Math.add(1, 1)).to.equal(2)\nend,\nshould_subtract = function(skip)\nexpect(Math.subtract(1, 1)).to.equal(0)\nend\n}\nWhile this is usually enough for normal cases, CrescTest provides\nsome useful lifecycle hooks that allow you to efficiently use\nglobal state.There is currently 4 lifecycle hooks, which are:\nafterAll - Runs after all test cases are ran.\nafterEach - Runs after each test case is ran.\nbeforeAll - Runs before all test cases are ran.\nbeforeEach - Runs before each test case runs.\n\nEach of this is useful for some cases. For example the xAll functions\nare usually useful when you want to setup/clean some global state\nbefore the entire test suite runs.On the other hand, the xEach functions are usually useful\nwhen you want to specifically prepare/clean some state for each case.\nThese functions are usually fired with (noOp, context), while afterEach is specifically fired with (noOp, context, isSkipped).","skipping-tests#Skipping Tests":"Aside from lifecycle hooks, there is a skip function that gets injected into every test case.This function skips the test it was called in, and if there is an afterEach hook present, then the afterEach hook will be fired with a boolean indicating\nif the previous test is skipped or not. This allows you to place some logic specifically for skipped tests."}},"/API":{"title":"API","data":{"":"export type skip = () -> ()\nexport type lifecycleFunctions = \"afterAll\" | \"afterEach\" | \"beforeAll\" | \"beforeEach\"\n\nexport type TestCaseResult = { ok: boolean, err: string? }\nexport type TestSuiteResult = { [string]: TestCaseResult }\nexport type TestSuite = {\n[string]: (skip: skip, ...any) -> (),\n}\nAll custom types used within CrescTest.\nfunction CrescTest.runLune(dir: string, context: any)\nA bootstrapper intended for usage within lune.\ndir: A path to the folder you want to run all .spec files that are present\ncontext: any value that you would want all tests to access it\n\n\nfunction CrescTest.runRoblox(dirInstance: Folder, context: any)\nA bootstrapper intended for usage within Roblox.\ndirInstace: A folder that contains all the .spec files you need to test.\ncontext: any value that you would want all tests to access it\n\n\nfunction CrescTest.runSuite(TestSuite: TestSuite, context: any): TestSuiteResult\nA runtime-agnostic method for running test suites.\nTestSuite: a table of test cases.\ncontext: any value that you would want all tests to access it.\n\n\nfunction CrescTest.expect(input: any)\nTakes in an input, that then gets used in assertions\n.never - Reverses the result of the assertion.\n.ok() - Asserts that value is non-nil\n.equal/equals(expectedValue) - Asserts that value is equal to expectedValue.\n.near(value) - Asserts that the rounded version of input equals the rounded version of value\n.a(expectedType) - Asserts that the typeof(input) equals to expectedType.\n.any.thing.that.is.not.part.of.the.api - Does nothing, so you are able to write scentences.\n\n\nx.spec.luau\nA file that has a bunch of TestCases.\nreturn {\nshould_add_well = function()\nCrescTest.expect(1 + 1).to.equal(2)\nend,\nshould_subtract_well = function()\nCrescTest.expect(1 - 1).to.equal(0)\nend,\nshould_do_something_complex = function(skip)\n--skip()\ntask.wait(2)\nCrescTest.expect(1 - 1).to.equal(1)\nend,\nafterAll = function(empty, context)\nend,\nafterEach = function(empty, context, isSkipped)\nend,\nbeforeAll = function(empty, context)\nend,\nbeforeEach = function(empty, context)\nend\n}"}},"/Getting-Started/Running-Tests":{"title":"Running Tests","data":{"":"Running tests in CrescTest is a bit complicated than what you normally need\nto do with Frameworks like TestEZ.","roblox#Roblox":"To run tests in a Roblox environment, we will make use of CrescTest's .runRoblox public function, for example:\nCrescTest.runRoblox(someFolderInReplicatedStorage)\nThis will run all .spec ModuleScripts that are located within the said folder,\nand then print a result message that contains what files (and their test cases)\nwere tested, alongside errors that occured (if there is any) during testing.","lune#Lune":"CrescTest also provides a way to run tests within a Lune environment, which is CrescTest.runLune\nfunction, for example:\nCrescTest.runLune(file_path_to_folder)\nThis will run all .spec luau files that are located within the said folder,\nand then print a result message that contains what files (and their test cases) that\nwere tested, alongside errors that occured (if there is any) during testing.","general#General":"CrescTest also provides a truly runtime-agnostic method for running\ntests, called .runSuite public function.\nlocal result = CrescTest.runSuite({\ncase1 = function(skip)\nend\n})\n\nprint(result) -- {case1 = {ok = true, err = nil}}\nThis function specifically takes a table of test cases, and context (can be nill),\nand then it runs all the given tests, and after that it returns a test suite result\nthat can be parsed by custom bootstrappers.\nImplementation detail: All built-in bootstrappers\nactively use this method, as such, when writing a custom bootstrapper\nfor an environment, you only need to handle the tree resolving\npart of a directory, and rendering the results."}},"/":{"title":"Home","data":{"":"CrescTest is a powerful and runtime-agnostic Luau testing framework for usage with Lune, or Roblox Studio","origin#Origin":"CrescTest isn't the first unit testing framework I wrote. In fact, its a successor to the Unit testing framework that libraries like Vinum and BridgeNet2 use.CrescTest has been made to improve what the Orginial framework didn't do well, and to provide what it lacked. For example:\nImproved error reporting\nCross-runtime testing\nExtremely lightweight.\nAbility to skip test cases.\nlifecycle functions.","documentation-structure#Documentation Structure":"CrescTest's documentation is based off Roblox's TestEZ documentation structure"}}}